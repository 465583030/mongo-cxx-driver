// Copyright 2015 MongoDB Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <mongocxx/exception/error_code.hpp>

#include <string>

#include <mongocxx/config/private/prelude.hh>

namespace mongocxx {
MONGOCXX_INLINE_NAMESPACE_BEGIN

namespace {

//
// An error_category for codes generated by the client.
//
class error_category final : public std::error_category {
   public:
    const char* name() const noexcept override {
        return "mongocxx";
    }

    std::string message(int code) const noexcept override {
        switch (static_cast<error_code>(code)) {
            case error_code::k_stream_name_resolution:
                return "DNS failure";
            case error_code::k_stream_socket:
                return "timeout communicating with server, or connection closed";
            case error_code::k_stream_connect:
                return "failed to connect to server";
            case error_code::k_client_too_big:
                return "attempted to send a message larger than the server's max message size";
            case error_code::k_client_authenticate:
                return "wrong credentials, or failure sending or receiving authentication messages";
            case error_code::k_client_no_acceptable_peer:
                return "an SSL connection was attempted, but the driver was not built with SSL";
            case error_code::k_client_in_exhaust:
                return "iterating an exhaust cursor began, then another operation with the same "
                       "client was attempted";
            case error_code::k_protocol_invalid_reply:
                return "corrupt response from the server";
            case error_code::k_protocol_bad_wire_version:
                return "server version too old or too new to communicate with the driver";
            case error_code::k_cursor_invalid_cursor:
                return "usage of invalid cursor, or cursor timed out on server";
            case error_code::k_namespace_invalid:
                return "tried to create a collection with an invalid name";
            case error_code::k_command_invalid_arg:
                return "passed bad parameters to a command";
            case error_code::k_collection_insert_failed:
            case error_code::k_collection_update_failed:
            case error_code::k_collection_delete_failed:
                return "passed invalid or empty input to collection helper";
            case error_code::k_scram_protocol_error:
                return "failure in SCRAM-SHA-1 authentication";
            case error_code::k_server_selection_failure:
                return "no replica set members or mongos available, or none matches provided read "
                       "preference";
            case error_code::k_invalid_client_object:
                return "invalid use of default constructed or moved-from mongocxx::client "
                       "object";
            case error_code::k_invalid_collection_object:
                return "invalid use of default constructed or moved-from mongocxx::collection "
                       "object";
            case error_code::k_invalid_database_object:
                return "invalid use of default constructed or moved-from mongocxx::database object";
            case error_code::k_invalid_parameter:
                return "an invalid or out-of-bounds parameter was provided";
            case error_code::k_ssl_not_supported:
                return "SSL support not available";
            case error_code::k_unknown_read_concern:
                return "invalid attempt to set an unknown read concern level";
            case error_code::k_unknown_write_concern:
                return "invalid attempt to set an unknown write concern level";
            case error_code::k_cannot_recreate_instance:
                return "cannot create a mongocxx::instance object if one has already been created";
            case error_code::k_server_response_malformed:
                return "the response from the server was malformed";
            case error_code::k_invalid_uri:
                return "an invalid MongoDB URI was provided";
            case error_code::k_invalid_gridfs_bucket_object:
                return "invalid use of default constructed or moved-from mongocxx::gridfs::bucket "
                       "object";
            case error_code::k_invalid_gridfs_uploader_object:
                return "invalid use of default constructed or moved-from "
                       "mongocxx::gridfs::uploader object";
            case error_code::k_invalid_gridfs_downloader_object:
                return "invalid use of default constructed or moved-from "
                       "mongocxx::gridfs::downloader object";
            case error_code::k_gridfs_stream_not_open:
                return "a mongocxx::gridfs::uploader object was not open for writing, or a "
                       "mongocxx::gridfs::downloader object was not open for "
                       "reading";
            case error_code::k_gridfs_upload_requires_too_many_chunks:
                return "a mongocxx::gridfs::uploader object has exceeded the maximum number "
                       "of allowable GridFS chunks when attempting to upload the requested "
                       "file";
            case error_code::k_gridfs_file_not_found:
                return "the requested GridFS file was not found";
            case error_code::k_gridfs_file_corrupted:
                return "a GridFS file being operated on was discovered to be corrupted";
            case error_code::k_instance_destroyed:
                return "the mongocxx instance has been destroyed";
            default:
                return "generic mongocxx error";
        }
    }
};

}  // namespace

const std::error_category& MONGOCXX_CALL error_category() {
    static const class error_category category {};
    return category;
}

MONGOCXX_INLINE_NAMESPACE_END
}  // namespace mongocxx
